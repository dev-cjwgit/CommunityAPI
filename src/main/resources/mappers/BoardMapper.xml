<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="repository.BoardMapper">

    <resultMap id="Board" type="domain.dto.BoardDTO">
        <result property="uid" column="uid"/>
        <result property="title" column="title"/>
        <result property="body" column="body"/>
        <result property="accountUid" column="account_uid"/>
        <result property="nickname" column="nickname"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="emotionCount" column="emotion_count"/>
        <collection property="emotionList" column="emotion_list" javaType="java.util.ArrayList"
                    ofType="domain.dto.BoardEmotionDTO" select="getBoardEmotion"/>
    </resultMap>

    <resultMap id="BoardEmotion" type="domain.dto.BoardEmotionDTO">
        <result property="boardUid" column="board_uid"/>
        <result property="accountUid" column="account_uid"/>
        <result property="nickname" column="nickname"/>
        <result property="status" column="status"/>
    </resultMap>

    <select id="getBoardEmotion" resultType="domain.dto.BoardEmotionDTO" resultMap="BoardEmotion">
        SELECT BC.`board_uid`, A.`nickname`, BC.`account_uid`, BC.`status`
        FROM `board_emotion` BC
                 LEFT OUTER JOIN
             account A
             ON
                 BC.`account_uid` = A.`uid`
        WHERE BC.`board_uid` = #{board_uid}
    </select>


    <!--    CRUD    -->
    <insert id="createBoard">
        <!-- db 구조 -->
        INSERT INTO board(`title`, `body`, `account_uid`)
        VALUES (#{board.title}, #{board.body}, #{uid});
    </insert>

    <select id="searchSummaryBoardNickName" resultType="domain.dto.BoardDTO" resultMap="Board">
        SELECT B.`uid`,
               B.`title`,
               A.`nickname`,
               B.`created_at`,
               B.`updated_at`,
               (SELECT count(*)
                FROM board_emotion
                WHERE board_uid = B.uid) as emotion
        FROM board B
                 LEFT OUTER JOIN
             account A
             ON
                 A.`uid` = B.`account_uid`
        WHERE B.`account_uid` IN (SELECT uid FROM account WHERE nickname LIKE "%${nickname}%")
        ORDER BY B.`created_at` DESC
        LIMIT ${page}, ${range};
    </select>

    <select id="searchSummaryBoardTitleBody" resultType="domain.dto.BoardDTO" resultMap="Board">
        SELECT B.`uid`,
        B.`title`,
        A.`nickname`,
        B.`created_at`,
        B.`updated_at`,
        (SELECT count(*)
        FROM board_emotion
        WHERE board_uid = B.uid) as emotion
        FROM board B
        LEFT OUTER JOIN
        account A
        ON
        B.`account_uid` = A.`uid`
        <where>
            <if test="title != null">OR `title` LIKE "%${title}%"</if>
            <if test="body != null">OR `body` LIKE "%${body}%"</if>
        </where>
        ORDER BY B.`created_at` DESC
        LIMIT ${page}, ${range};
    </select>

    <select id="searchSummaryBoardCommentNickName" resultType="domain.dto.BoardDTO" resultMap="Board">
        SELECT DISTINCT B.`uid`,
                        B.`title`,
                        A.`nickname`,
                        B.`created_at`,
                        B.`updated_at`,
                        (SELECT count(*)
                         FROM board_emotion
                         WHERE board_uid = B.uid) as emotion
        FROM board B
                 LEFT OUTER JOIN
             account A
             ON
                 A.`uid` = B.`account_uid`

                 LEFT OUTER JOIN
             board_comment BC
             ON
                 BC.`board_uid` = B.`uid`
        WHERE BC.`account_uid` IN (SELECT uid FROM account WHERE nickname LIKE "%${nickname}%")
        ORDER BY B.`created_at` DESC
        LIMIT ${page}, ${range};
    </select>

    <select id="searchSummaryBoardTitle" resultType="domain.dto.BoardDTO" resultMap="Board">
        SELECT B.`uid`,
               B.`title`,
               A.`nickname`,
               B.`created_at`,
               B.`updated_at`,
               (SELECT count(*)
                FROM board_emotion
                WHERE board_uid = B.uid) as emotion
        FROM board B
                 LEFT OUTER JOIN
             account A
             ON
                 B.`account_uid` = A.`uid`
        WHERE `title` LIKE "%${word}%"
        ORDER BY B.`created_at` DESC
        LIMIT ${page}, ${range};
    </select>

    <select id="getBoard" resultType="domain.dto.BoardDTO" resultMap="Board">
        SELECT B.`uid`,
        B.`title`,
        A.`nickname`,
        B.`created_at`,
        B.`updated_at`,
        <if test="board.detail">
            A.`uid` as accountUid,
            B.`body`,
        </if>
        (SELECT count(*)
        FROM board_emotion
        WHERE board_uid = B.uid) as emotion_count
        FROM board B
        LEFT OUTER JOIN
        account A
        ON
        B.`account_uid` = A.`uid`
        <where>
            <choose>
                <when test="board.uid == null">
                    <if test="board.title != null">AND B.`title` LIKE "%${board.title}%"</if>
                    <if test="board.body != null">AND B.`body` LIKE "%${board.body}%"</if>
                    <if test="board.nickname != null">
                        B.`account_uid` IN (SELECT uid FROM account WHERE nickname LIKE "%${board.nickname}%")
                    </if>
                </when>
                <otherwise>
                    AND B.`uid` = ${board.uid}
                </otherwise>
            </choose>
        </where>
        ORDER BY B.`created_at` DESC
        LIMIT ${board.page}, ${board.range};
    </select>

    <select id="getBoardListCnt" resultType="Long">
        SELECT count(*)
        FROM board;
    </select>

    <update id="updateBoard">
        UPDATE `board`
        SET `title` = #{board.title},
            `body`  = #{board.body}
        WHERE `uid` = #{board.uid}
    </update>

    <delete id="deleteBoard">
        DELETE
        FROM board
        WHERE `uid` = ${board_uid};
    </delete>

    <!--    func    -->

    <select id="getAccountUid" resultType="Long">
        SELECT `account_uid`
        FROM board
        WHERE `uid` = #{board_uid};
    </select>

    <insert id="createBoardEmotion">
        <!-- db 구조 -->
        INSERT INTO board_emotion(`board_uid`, `account_uid`, `status`)
        VALUES (#{board_uid}, #{account_uid}, #{status});
    </insert>

    <delete id="deleteBoardEmotion">
        DELETE
        FROM board_emotion
        WHERE `board_uid` = ${board_uid}
          AND `account_uid` = ${account_uid};
    </delete>

    <select id="isBoard" resultType="Boolean">
        SELECT EXISTS(
                       SELECT `uid`
                       FROM `board`
                       WHERE `uid` = #{board_uid}
                       LIMIT 1
                   );
    </select>
</mapper>